
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.LinkedHashMap;
import org.json.simple.JSONArray;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.JsonPath;

public class JsonReadUtils {

	private static String keyvalue;
	private static String RootNode, Response;

	/**
	 * @param response
	 * @param Root
	 *            Set Root Node and response its mandatory before use this
	 *            Utility Set this values
	 */
	public static void setRoot(String response, String Root) {
		if (response != null && Root != null) {
			RootNode = Root;
			Response = response;
		} else {
			System.out.println("");
		}
	}

	/**
	 * @param key
	 * @return
	 * 
	 * 		read string value in Json
	 * 
	 */
	public static String readStringvalue(String key) {
		keyvalue = "$." + key;
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param index
	 * @return get json array index values
	 */
	public static LinkedHashMap<String, String> readJsonArrayValue(String index) {
		keyvalue = "$." + RootNode + ".[" + index + "]";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param key
	 * @return Array specific all values
	 * 
	 */
	public static LinkedHashMap<String, String> readjsonArraySpecificcAllValue(String key) {
		keyvalue = "$.." + key;
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param index
	 * @param values
	 * @return Specific array value
	 */
	public static String readjsonSpecificValueOfArray(String index, String values) {
		keyvalue = "$." + RootNode + "[" + index + "].['" + values + "']";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param index
	 * @param NameofNestedArray
	 * @return
	 * 
	 * 		Return the Inner Array Values
	 * 
	 */
	public static String readJsonNestedArrays(String index, String NameofNestedArray) {
		keyvalue = "$." + RootNode + "[" + index + "].['" + NameofNestedArray + "']";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	public static String readJsonNestedInnerArrays(String array, String index, String NameofNestedArray) {
		keyvalue = "$." + RootNode + "." + array + "[" + index + "].['" + NameofNestedArray + "']";
		System.out.println(keyvalue);
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	public static LinkedHashMap<String, String> readJsonNestedArray(String index, String NameofNestedArray) {
		keyvalue = "$." + RootNode + "[" + index + "].['" + NameofNestedArray + "']";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @return Array count $.data..length
	 */
	public static int getjsonDefaultArrayCount() {
		keyvalue = "$." + RootNode + ".length";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return Integer.parseInt((String) JsonPath.read(document, keyvalue));
	}

	/**
	 * @param array
	 * @param attribute
	 *            give this format attribute name==value
	 * @return $.nodes[*]['variables'][?(@.name=='Random1')]
	 */
	public static LinkedHashMap<String, String> getjsonArrayParticularAdtributevalue(String array, String attribute) {
		keyvalue = "$." + RootNode + ".[*][" + array + "][?(@." + attribute + ")";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param arrayvalue
	 * @return $.data[1] arrayvalue=0,1,3
	 * 
	 */
	public static LinkedHashMap<String, String> getJsonArrayMultibleValue(String arrayvalue) {
		keyvalue = "$." + RootNode + "[" + arrayvalue + "]";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param order
	 * @param arrayvalue
	 * @return $.data[-1:]
	 */
	public static LinkedHashMap<String, String> getJsonArraOrderValue(String order, String arrayvalue) {
		if (order.equals(Order.FIRST))
			keyvalue = "$." + RootNode + "[" + arrayvalue + "]";
		else if (order.equals(Order.LAST))
			keyvalue = "$." + RootNode + "[-" + arrayvalue + ":]";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param from
	 * @param to
	 * @return $.data[1:3]
	 */
	public static LinkedHashMap<String, String> getJsonArrayFromToValue(String from, String to) {
		keyvalue = "$." + RootNode + "[" + from + ":" + to + "]";
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	public static enum Order {
		FIRST, LAST
	}

	/**
	 * @param jsonquery
	 * @return
	 * 
	 * 		One Values frome Json
	 */
	public static String getJsonvalue(String jsonquery) {
		keyvalue = jsonquery;
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param jsonquery
	 * @return multiple values from json
	 */
	public static LinkedHashMap<String, String> getJsonMultipleValue(String jsonquery) {
		keyvalue = jsonquery;
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		return JsonPath.read(document, keyvalue);
	}

	/**
	 * @param jsonquery
	 * @return Array value
	 */
	@SuppressWarnings("unchecked")
	public static JSONArray getJsonMultibleArrayValue(String jsonquery) {
		JSONArray array = new JSONArray();
		keyvalue = jsonquery;
		System.out.println(keyvalue);
		Object document = Configuration.defaultConfiguration().jsonProvider().parse(Response);
		array.add(JsonPath.read(document, keyvalue));
		return array;
	}

	/**
	 * @param JsonFilePath
	 * @param jsonkey
	 * @return Read t
	 */
	public static String readJsondatavalue(String JsonFilePath, String jsonkey) {
		File file = new File(JsonFilePath);
		String string = null;
		try {
			string = new String(Files.readAllBytes(file.toPath()));
		} catch (IOException e) {
			e.printStackTrace();
		}
		String str = com.jayway.jsonpath.JsonPath.read(string, jsonkey);
		return str;
	}

}
